
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\004\010\000\002\005\003\000\002" +
    "\005\005\000\002\006\004\000\002\006\005\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\016\006\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\006\000\002\017\006\000" +
    "\002\020\003\000\002\020\005\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\012\003\000\002\012\003\000\002\027\005" +
    "\000\002\023\002\000\002\023\004\000\002\023\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\024\007\000\002\024" +
    "\011\000\002\025\007\000\002\025\013\000\002\025\012" +
    "\000\002\025\012\000\002\025\011\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\007\000\002\031\007\000\002\032" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\012\002\ufffd\005\004\010\022\012\020\001" +
    "\002\000\026\005\023\006\156\010\153\043\024\044\026" +
    "\045\025\046\042\050\154\051\157\052\155\001\002\000" +
    "\004\002\152\001\002\000\012\002\ufffd\005\004\010\022" +
    "\012\020\001\002\000\014\002\uffcf\005\uffcf\010\uffcf\012" +
    "\uffcf\013\uffcf\001\002\000\012\002\ufffd\005\004\010\022" +
    "\012\020\001\002\000\014\002\uffc2\005\uffc2\010\uffc2\012" +
    "\uffc2\013\uffc2\001\002\000\014\002\uffcd\005\uffcd\010\uffcd" +
    "\012\uffcd\013\uffcd\001\002\000\014\002\uffc1\005\uffc1\010" +
    "\uffc1\012\uffc1\013\uffc1\001\002\000\016\002\uffd1\004\107" +
    "\005\uffd1\010\uffd1\012\uffd1\013\uffd1\001\002\000\024\002" +
    "\ufff6\004\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\050\075\053\ufff6\001\002\000\012\002\ufffd\005\004\010" +
    "\022\012\020\001\002\000\014\002\uffd0\005\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\001\002\000\010\005\004\010\022\013" +
    "\uffd4\001\002\000\014\002\uffce\005\uffce\010\uffce\012\uffce" +
    "\013\uffce\001\002\000\016\005\023\043\024\044\026\045" +
    "\025\046\042\050\043\001\002\000\014\043\024\044\026" +
    "\045\025\046\042\050\043\001\002\000\056\002\uffef\004" +
    "\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\050\uffef" +
    "\053\uffef\001\002\000\056\002\ufff0\004\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\050\ufff0\053\ufff0\001\002" +
    "\000\056\002\uffee\004\uffee\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\050\uffee\053\uffee\001\002\000\044\002\uffe6" +
    "\004\uffe6\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\020" +
    "\050\021\051\023\047\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\050\uffe6\053\uffe6\001\002\000\004\011\131\001" +
    "\002\000\032\002\uffea\004\uffea\005\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\025\uffea\026\uffea\027\125\050\uffea\053" +
    "\uffea\001\002\000\026\002\uffed\004\uffed\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\026\127\050\uffed\053\uffed\001" +
    "\002\000\030\002\uffec\004\uffec\005\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\025\123\026\uffec\050\uffec\053\uffec\001" +
    "\002\000\050\002\uffe3\004\uffe3\005\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\053\015\054\020\uffe3\021\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\050\uffe3" +
    "\053\uffe3\001\002\000\056\002\uffdb\004\uffdb\005\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\050\uffdb\053\uffdb\001\002" +
    "\000\056\002\uffd6\004\uffd6\005\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\050\uffd6\053\uffd6\001\002\000\056\002\uffde" +
    "\004\uffde\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\060\017\056\020\uffde\021\uffde\022\057" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\050" +
    "\uffde\053\uffde\001\002\000\006\005\074\050\075\001\002" +
    "\000\036\002\uffe8\004\uffe8\005\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\024\045\025\uffe8\026\uffe8\027\uffe8\030\044" +
    "\050\uffe8\053\uffe8\001\002\000\056\002\ufff1\004\ufff1\005" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\050\ufff1\053\ufff1" +
    "\001\002\000\056\002\uffd7\004\uffd7\005\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\050\uffd7\053\uffd7\001\002\000\004" +
    "\023\072\001\002\000\014\043\024\044\026\045\025\046" +
    "\042\050\043\001\002\000\044\002\uffe5\004\uffe5\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\020\050\021\051\023" +
    "\047\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\050\uffe5" +
    "\053\uffe5\001\002\000\006\020\066\021\067\001\002\000" +
    "\014\043\024\044\026\045\025\046\042\050\043\001\002" +
    "\000\014\043\024\044\026\045\025\046\042\050\043\001" +
    "\002\000\050\002\uffe2\004\uffe2\005\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\053\015\054\020\uffe2\021\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\050\uffe2" +
    "\053\uffe2\001\002\000\014\043\024\044\026\045\025\046" +
    "\042\050\043\001\002\000\014\043\024\044\026\045\025" +
    "\046\042\050\043\001\002\000\056\002\uffdc\004\uffdc\005" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\060\017\056\020\uffdc\021\uffdc\022\057\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\050\uffdc\053\uffdc" +
    "\001\002\000\014\043\024\044\026\045\025\046\042\050" +
    "\043\001\002\000\014\043\024\044\026\045\025\046\042" +
    "\050\043\001\002\000\014\043\024\044\026\045\025\046" +
    "\042\050\043\001\002\000\056\002\uffda\004\uffda\005\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\050\uffda\053\uffda\001" +
    "\002\000\056\002\uffd8\004\uffd8\005\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\050\uffd8\053\uffd8\001\002\000\056\002" +
    "\uffd9\004\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\050\uffd9\053\uffd9\001\002\000\056\002\uffdd\004\uffdd\005" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\060\017\056\020\uffdd\021\uffdd\022\057\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\050\uffdd\053\uffdd" +
    "\001\002\000\050\002\uffe1\004\uffe1\005\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\053\015\054\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\050" +
    "\uffe1\053\uffe1\001\002\000\014\043\024\044\026\045\025" +
    "\046\042\050\043\001\002\000\014\043\024\044\026\045" +
    "\025\046\042\050\043\001\002\000\050\002\uffe0\004\uffe0" +
    "\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\053\015" +
    "\054\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\050\uffe0\053\uffe0\001\002\000\050\002" +
    "\uffdf\004\uffdf\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\053\015\054\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\050\uffdf\053\uffdf\001\002" +
    "\000\014\043\024\044\026\045\025\046\042\050\043\001" +
    "\002\000\044\002\uffe4\004\uffe4\005\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\020\050\021\051\023\047\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\050\uffe4\053\uffe4\001\002" +
    "\000\016\005\100\043\024\044\026\045\025\046\042\050" +
    "\043\001\002\000\004\023\077\001\002\000\024\002\ufff3" +
    "\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\050" +
    "\ufff3\053\ufff3\001\002\000\024\002\ufff2\004\ufff2\005\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\050\ufff2\053\ufff2\001" +
    "\002\000\006\005\023\011\115\001\002\000\004\005\102" +
    "\001\002\000\006\005\023\011\104\001\002\000\006\004" +
    "\107\011\110\001\002\000\004\040\105\001\002\000\004" +
    "\012\020\001\002\000\014\002\uffc8\005\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\001\002\000\004\005\023\001\002\000\004" +
    "\040\111\001\002\000\004\012\020\001\002\000\014\002" +
    "\uffc9\005\uffc9\010\uffc9\012\uffc9\013\uffc9\001\002\000\024" +
    "\002\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\050\075\053\ufff5\001\002\000\006\004\107\011\120" +
    "\001\002\000\004\040\116\001\002\000\004\012\020\001" +
    "\002\000\014\002\uffc6\005\uffc6\010\uffc6\012\uffc6\013\uffc6" +
    "\001\002\000\004\040\121\001\002\000\004\012\020\001" +
    "\002\000\014\002\uffc7\005\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\001\002\000\014\043\024\044\026\045\025\046\042\050" +
    "\043\001\002\000\032\002\uffe9\004\uffe9\005\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\025\uffe9\026\uffe9\027\125\050" +
    "\uffe9\053\uffe9\001\002\000\014\043\024\044\026\045\025" +
    "\046\042\050\043\001\002\000\036\002\uffe7\004\uffe7\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\024\045\025\uffe7" +
    "\026\uffe7\027\uffe7\030\044\050\uffe7\053\uffe7\001\002\000" +
    "\014\043\024\044\026\045\025\046\042\050\043\001\002" +
    "\000\030\002\uffeb\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\025\123\026\uffeb\050\uffeb\053\uffeb\001\002" +
    "\000\006\035\133\037\132\001\002\000\004\012\020\001" +
    "\002\000\004\012\020\001\002\000\016\002\uffcc\005\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\036\135\001\002\000\004\012" +
    "\020\001\002\000\014\002\uffcb\005\uffcb\010\uffcb\012\uffcb" +
    "\013\uffcb\001\002\000\014\002\uffca\005\uffca\010\uffca\012" +
    "\uffca\013\uffca\001\002\000\024\002\ufff4\004\ufff4\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\050\ufff4\053\ufff4\001" +
    "\002\000\010\005\004\010\022\013\uffd4\001\002\000\010" +
    "\005\004\010\022\013\uffd4\001\002\000\004\013\144\001" +
    "\002\000\016\002\uffd5\005\uffd5\010\uffd5\012\uffd5\013\uffd5" +
    "\036\uffd5\001\002\000\004\013\uffd2\001\002\000\004\013" +
    "\uffd3\001\002\000\004\002\ufffe\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002\000\006\047\173\050\174\001\002\000\062\002\uffd7" +
    "\004\uffd7\005\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\166\032" +
    "\171\033\167\034\170\050\uffd7\001\002\000\014\002\uffc4" +
    "\005\uffc4\010\uffc4\012\uffc4\013\uffc4\001\002\000\004\045" +
    "\162\001\002\000\014\002\uffc5\005\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\001\002\000\006\004\107\053\161\001\002\000" +
    "\014\002\uffc3\005\uffc3\010\uffc3\012\uffc3\013\uffc3\001\002" +
    "\000\004\007\163\001\002\000\004\050\164\001\002\000" +
    "\012\031\166\032\171\033\167\034\170\001\002\000\014" +
    "\002\ufff7\005\ufff7\010\ufff7\012\ufff7\013\ufff7\001\002\000" +
    "\014\002\ufffc\005\ufffc\010\ufffc\012\ufffc\013\ufffc\001\002" +
    "\000\014\002\ufffa\005\ufffa\010\ufffa\012\ufffa\013\ufffa\001" +
    "\002\000\014\002\ufffb\005\ufffb\010\ufffb\012\ufffb\013\ufffb" +
    "\001\002\000\014\002\ufff9\005\ufff9\010\ufff9\012\ufff9\013" +
    "\ufff9\001\002\000\014\002\ufff8\005\ufff8\010\ufff8\012\ufff8" +
    "\013\ufff8\001\002\000\004\011\200\001\002\000\004\011" +
    "\175\001\002\000\006\041\176\042\177\001\002\000\014" +
    "\002\uffc0\005\uffc0\010\uffc0\012\uffc0\013\uffc0\001\002\000" +
    "\014\002\uffbe\005\uffbe\010\uffbe\012\uffbe\013\uffbe\001\002" +
    "\000\004\041\201\001\002\000\014\002\uffbf\005\uffbf\010" +
    "\uffbf\012\uffbf\013\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\032\002\004\004\005\005\013\006\014\022" +
    "\007\024\016\025\006\026\020\027\015\030\011\031\010" +
    "\032\012\001\001\000\032\005\157\006\014\010\035\011" +
    "\137\012\034\013\031\014\032\015\030\016\040\017\026" +
    "\020\033\021\036\001\001\000\002\001\001\000\032\002" +
    "\150\004\005\005\013\006\014\022\007\024\016\025\006" +
    "\026\020\027\015\030\011\031\010\032\012\001\001\000" +
    "\002\001\001\000\032\002\147\004\005\005\013\006\014" +
    "\022\007\024\016\025\006\026\020\027\015\030\011\031" +
    "\010\032\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\146\004\005\005\013\006\014\022\007\024\016" +
    "\025\006\026\020\027\015\030\011\031\010\032\012\001" +
    "\001\000\002\001\001\000\030\004\140\005\013\006\014" +
    "\022\141\023\142\024\016\025\006\026\020\030\011\031" +
    "\010\032\012\001\001\000\002\001\001\000\030\006\037" +
    "\010\035\011\027\012\034\013\031\014\032\015\030\016" +
    "\040\017\026\020\033\021\036\001\001\000\026\010\035" +
    "\011\137\012\034\013\031\014\032\015\030\016\040\017" +
    "\026\020\033\021\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\035\012\034\017\045\020\033\021\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\035\012\034\020" +
    "\064\021\036\001\001\000\012\010\035\012\034\020\051" +
    "\021\036\001\001\000\002\001\001\000\010\010\035\012" +
    "\034\021\063\001\001\000\010\010\035\012\034\021\054" +
    "\001\001\000\002\001\001\000\006\010\035\012\062\001" +
    "\001\000\006\010\035\012\061\001\001\000\006\010\035" +
    "\012\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\035\012\034\020\070\021\036\001\001\000\012\010" +
    "\035\012\034\020\067\021\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\035\012\034\017\072\020" +
    "\033\021\036\001\001\000\002\001\001\000\026\010\035" +
    "\011\100\012\034\013\031\014\032\015\030\016\040\017" +
    "\026\020\033\021\036\001\001\000\004\007\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\113\006" +
    "\014\001\001\000\002\001\001\000\006\005\102\006\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\105\001\001\000\002\001\001\000\004\006\112\001\001" +
    "\000\002\001\001\000\004\027\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\121\001\001\000\002\001\001\000\020" +
    "\010\035\012\034\015\123\016\040\017\026\020\033\021" +
    "\036\001\001\000\002\001\001\000\016\010\035\012\034" +
    "\016\125\017\026\020\033\021\036\001\001\000\002\001" +
    "\001\000\022\010\035\012\034\014\127\015\030\016\040" +
    "\017\026\020\033\021\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\136\001\001\000\004\027\133" +
    "\001\001\000\002\001\001\000\004\027\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\140\005\013\006\014\022\141\023\145\024\016\025" +
    "\006\026\020\030\011\031\010\032\012\001\001\000\030" +
    "\004\140\005\013\006\014\022\141\023\144\024\016\025" +
    "\006\026\020\030\011\031\010\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(java_cup.runtime.Symbol currToken) {
        System.out.println("Funcionou!: " 
        + "Linha: " + (currToken.left) + " Coluna: " + (currToken.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // unidade_de_compilacao ::= declaracao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= unidade_de_compilacao EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unidade_de_compilacao ::= instrucao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unidade_de_compilacao ::= instrucao_composta unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidade_de_compilacao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // especificador_tipo ::= INTEIRO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // especificador_tipo ::= DECIMAL_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // especificador_tipo ::= CARACTER_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificador_tipo ::= BOOLEANO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao ::= FECHA_COMANDO IDENTIFICADOR especificador_tipo 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracao ::= FECHA_COMANDO ABRE_COLCHETE INTEIRO FECHA_COLCHETE IDENTIFICADOR especificador_tipo 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= expressao VIRGULA expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressao_atribuicao ::= FECHA_COMANDO expressao_condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressao_atribuicao ::= expressao_atribuicao IDENTIFICADOR operador_atribuicao 
            {
              Object RESULT =null;
		 System.out.println("Atribuicao feita a um identificador\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operador_atribuicao ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constante ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constante ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constante ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao_condicional ::= expressao_ou 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao_ou ::= expressao_e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao_ou ::= expressao_ou OU expressao_e 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao_e ::= expressao_ou_exclusivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao_e ::= expressao_e E expressao_ou_exclusivo 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica E encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_ou_exclusivo ::= expressao_equalidade 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao_ou_exclusivo ::= expressao_ou_exclusivo OU_EXCLUSIVO expressao_equalidade 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU_EXCLUSIVO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao_equalidade ::= expressao_relacional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_equalidade ::= expressao_equalidade EQUIVALENCIA expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '==' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_equalidade ::= expressao_equalidade NEGACAO ATRIBUICAO expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '!=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_relacional ::= expressao_aditiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_relacional ::= expressao_relacional MENOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_relacional ::= expressao_relacional MAIOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao_relacional ::= expressao_relacional ATRIBUICAO MENOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao_relacional ::= expressao_relacional ATRIBUICAO MAIOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressao_aditiva ::= expressao_multiplicativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressao_aditiva ::= expressao_aditiva MAIS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de ADICAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao_aditiva ::= expressao_aditiva MENOS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de SUBTRACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_multiplicativa ::= expressao_primaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_multiplicativa ::= expressao_multiplicativa MULTIPLICACAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de MULTIPLICACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao_multiplicativa ::= expressao_multiplicativa DIVISAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de  DIVISAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_multiplicativa ::= expressao_multiplicativa RESTO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de RESTO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_primaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao_primaria ::= constante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrucao_composta ::= ABRE_BLOCO bloco_instrucao FECHA_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_composta",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloco_instrucao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloco_instrucao ::= declaracao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloco_instrucao ::= instrucao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucao ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucao ::= instrucao_se 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucao ::= instrucao_iterativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucao ::= instrucao_pulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucao ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucao_se ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES SE instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrucao_se ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES SE instrucao_composta SE_NAO instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE SE_NAO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrucao_iterativa ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES ENQUANTO instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando ENQUANTO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO expressao FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO expressao FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instrucao_pulo ::= FECHA_COMANDO CONTINUAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instrucao_pulo ::= FECHA_COMANDO PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instrucao_pulo ::= FECHA_COMANDO expressao RETORNAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comando ::= comando_escreva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comando ::= comando_guarda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comando_escreva ::= FECHA_COMANDO ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES ESCREVA 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comando_escreva ::= FECHA_COMANDO ABRE_PARENTESES STRING FECHA_PARENTESES ESCREVA 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comando_guarda ::= FECHA_COMANDO ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES GUARDA 
            {
              Object RESULT =null;
		 System.out.println("Comando GUARDA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_guarda",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
