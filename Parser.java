
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\004\010\000\002\005\003\000\002" +
    "\005\005\000\002\006\004\000\002\006\003\000\002\006" +
    "\005\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\013\003\000\002\013\005\000\002\014\003\000\002" +
    "\014\005\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\017\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\012\003\000\002\012\003" +
    "\000\002\027\005\000\002\023\002\000\002\023\004\000" +
    "\002\023\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\024" +
    "\007\000\002\024\011\000\002\025\007\000\002\025\013" +
    "\000\002\025\012\000\002\025\012\000\002\025\011\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\030\003\000\002\030\003\000\002\031\007\000\002\031" +
    "\007\000\002\032\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\024\002\ufffd\005\034\010\021\012\031\046" +
    "\007\047\012\050\013\051\017\053\026\001\002\000\064" +
    "\002\uffe2\004\uffe2\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\065\015\066\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\056\uffe2\001\002" +
    "\000\044\002\uffe9\004\uffe9\005\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\023\uffe9\026\uffe9\027\uffe9\030\053\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\053\uffe9\056\uffe9\001\002\000" +
    "\050\002\uffe7\004\uffe7\005\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\023\uffe7\024\055\025\056\026\uffe7\027\uffe7\030" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\056\uffe7" +
    "\001\002\000\072\002\uffee\004\uffee\005\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\032\uffee\033\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\053\uffee\056\uffee\001\002\000\072\002" +
    "\uffd5\004\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053" +
    "\uffd5\056\uffd5\001\002\000\026\002\uffcf\005\uffcf\010\uffcf" +
    "\012\uffcf\013\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\001\002\000\072\002\uffed\004\uffed\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\053\uffed\056\uffed\001\002\000\072" +
    "\002\uffef\004\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\032\uffef\033\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\053\uffef\056\uffef\001\002\000\024\002\ufffd\005\034\010" +
    "\021\012\031\046\007\047\012\050\013\051\017\053\026" +
    "\001\002\000\036\002\ufff3\004\ufff3\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\023\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\053\ufff3\056\ufff3\001\002\000\024\002\ufffd\005" +
    "\034\010\021\012\031\046\007\047\012\050\013\051\017" +
    "\053\026\001\002\000\072\002\ufff0\004\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\053\ufff0\056\ufff0\001\002\000" +
    "\026\002\uffc1\005\uffc1\010\uffc1\012\uffc1\013\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\053\uffc1\001\002\000\016\005" +
    "\043\046\007\047\012\050\013\051\017\053\026\001\002" +
    "\000\072\002\uffdd\004\uffdd\005\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\072\017\070\020\uffdd" +
    "\021\uffdd\022\071\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\053\uffdd\056\uffdd\001\002\000\026\002\uffcd\005" +
    "\uffcd\010\uffcd\012\uffcd\013\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\053\uffcd\001\002\000\036\002\ufff6\004\ufff6\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\023\046\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\053\ufff6\056\ufff6\001\002\000" +
    "\072\002\uffda\004\uffda\005\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\032\uffda\033\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\053\uffda\056\uffda\001\002\000\072\002\uffd6\004\uffd6" +
    "\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\053\uffd6\056\uffd6" +
    "\001\002\000\060\002\uffe5\004\uffe5\005\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\020\060\021\061\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032\062\033\063\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\056\uffe5\001\002" +
    "\000\004\002\144\001\002\000\022\005\034\010\021\013" +
    "\uffd3\046\007\047\012\050\013\051\017\053\026\001\002" +
    "\000\024\002\ufffd\005\034\010\021\012\031\046\007\047" +
    "\012\050\013\051\017\053\026\001\002\000\040\002\uffec" +
    "\004\uffec\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\023" +
    "\uffec\027\133\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec" +
    "\056\uffec\001\002\000\026\005\043\006\107\010\104\046" +
    "\007\047\012\050\013\051\017\053\105\054\110\055\106" +
    "\001\002\000\026\002\uffce\005\uffce\010\uffce\012\uffce\013" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\053\uffce\001\002" +
    "\000\042\002\uffeb\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\023\uffeb\026\051\027\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\053\uffeb\056\uffeb\001\002\000\026\002" +
    "\uffcc\005\uffcc\010\uffcc\012\uffcc\013\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\053\uffcc\001\002\000\030\002\uffd0\004" +
    "\042\005\uffd0\010\uffd0\012\uffd0\013\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\053\uffd0\001\002\000\026\002\uffc0\005" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\001\002\000\016\005\043\046\007\047" +
    "\012\050\013\051\017\053\026\001\002\000\014\046\007" +
    "\047\012\050\013\051\017\053\026\001\002\000\036\002" +
    "\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\023\046\046\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\056" +
    "\ufff5\001\002\000\004\053\047\001\002\000\004\053\ufff1" +
    "\001\002\000\036\002\ufff2\004\ufff2\005\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\023\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\053\ufff2\056\ufff2\001\002\000\036\002\ufff4\004" +
    "\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\023\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\056\ufff4\001" +
    "\002\000\014\046\007\047\012\050\013\051\017\053\026" +
    "\001\002\000\044\002\uffe8\004\uffe8\005\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\023\uffe8\026\uffe8\027\uffe8\030\053" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\056\uffe8\001" +
    "\002\000\014\046\007\047\012\050\013\051\017\053\026" +
    "\001\002\000\050\002\uffe6\004\uffe6\005\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\023\uffe6\024\055\025\056\026\uffe6" +
    "\027\uffe6\030\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053" +
    "\uffe6\056\uffe6\001\002\000\014\046\007\047\012\050\013" +
    "\051\017\053\026\001\002\000\014\046\007\047\012\050" +
    "\013\051\017\053\026\001\002\000\060\002\uffe3\004\uffe3" +
    "\005\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\020\060\021" +
    "\061\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\032\062\033\063\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053" +
    "\uffe3\056\uffe3\001\002\000\014\046\007\047\012\050\013" +
    "\051\017\053\026\001\002\000\014\046\007\047\012\050" +
    "\013\051\017\053\026\001\002\000\014\046\007\047\012" +
    "\050\013\051\017\053\026\001\002\000\014\046\007\047" +
    "\012\050\013\051\017\053\026\001\002\000\064\002\uffde" +
    "\004\uffde\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\065\015\066\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\032\uffde\033\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\053\uffde\056\uffde\001\002\000\014" +
    "\046\007\047\012\050\013\051\017\053\026\001\002\000" +
    "\014\046\007\047\012\050\013\051\017\053\026\001\002" +
    "\000\072\002\uffdb\004\uffdb\005\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\072\017\070\020\uffdb" +
    "\021\uffdb\022\071\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\032\uffdb\033\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\056\uffdb\001\002\000\014\046\007\047" +
    "\012\050\013\051\017\053\026\001\002\000\014\046\007" +
    "\047\012\050\013\051\017\053\026\001\002\000\014\046" +
    "\007\047\012\050\013\051\017\053\026\001\002\000\072" +
    "\002\uffd9\004\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\032\uffd9\033\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\053\uffd9\056\uffd9\001\002\000\072\002\uffd7\004\uffd7\005" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\056\uffd7\001" +
    "\002\000\072\002\uffd8\004\uffd8\005\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\033\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\056\uffd8\001\002\000\072\002\uffdc" +
    "\004\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\072\017\070\020\uffdc\021\uffdc\022\071" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc" +
    "\056\uffdc\001\002\000\064\002\uffdf\004\uffdf\005\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\065\015\066\020\uffdf" +
    "\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\032\uffdf\033\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\053\uffdf\056\uffdf\001\002\000\064\002\uffe1\004\uffe1\005" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\065\015\066" +
    "\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\053\uffe1\056\uffe1\001\002\000\064\002\uffe0\004" +
    "\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\065" +
    "\015\066\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\053\uffe0\056\uffe0\001\002\000\060\002" +
    "\uffe4\004\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\020\060\021\061\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\032\062\033\063\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\056\uffe4\001\002\000\034\002\ufff4\004" +
    "\ufff4\005\ufff4\010\ufff4\012\ufff4\013\ufff4\023\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\053\ufff4\056\ufff3\001\002\000" +
    "\006\052\124\053\125\001\002\000\100\002\uffd6\004\uffd6" +
    "\005\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034" +
    "\117\035\122\036\120\037\121\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\053\uffd6\056\uffd6\001\002\000\026\002\uffc3\005" +
    "\uffc3\010\uffc3\012\uffc3\013\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\053\uffc3\001\002\000\004\050\113\001\002\000" +
    "\026\002\uffc4\005\uffc4\010\uffc4\012\uffc4\013\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\053\uffc4\001\002\000\006\004" +
    "\042\056\112\001\002\000\026\002\uffc2\005\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053" +
    "\uffc2\001\002\000\004\007\114\001\002\000\004\053\115" +
    "\001\002\000\012\034\117\035\122\036\120\037\121\001" +
    "\002\000\026\002\ufff7\005\ufff7\010\ufff7\012\ufff7\013\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\053\ufff7\001\002\000" +
    "\026\002\ufffc\005\ufffc\010\ufffc\012\ufffc\013\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\053\ufffc\001\002\000\026\002" +
    "\ufffa\005\ufffa\010\ufffa\012\ufffa\013\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\053\ufffa\001\002\000\026\002\ufffb\005" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\053\ufffb\001\002\000\026\002\ufff9\005\ufff9\010" +
    "\ufff9\012\ufff9\013\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\053\ufff9\001\002\000\026\002\ufff8\005\ufff8\010\ufff8\012" +
    "\ufff8\013\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8" +
    "\001\002\000\004\011\131\001\002\000\004\011\126\001" +
    "\002\000\006\044\127\045\130\001\002\000\026\002\uffbf" +
    "\005\uffbf\010\uffbf\012\uffbf\013\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\001\002\000\026\002\uffbd\005\uffbd" +
    "\010\uffbd\012\uffbd\013\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\053\uffbd\001\002\000\004\044\132\001\002\000\026" +
    "\002\uffbe\005\uffbe\010\uffbe\012\uffbe\013\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\053\uffbe\001\002\000\014\046\007" +
    "\047\012\050\013\051\017\053\026\001\002\000\042\002" +
    "\uffea\004\uffea\005\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\023\uffea\026\051\027\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\053\uffea\056\uffea\001\002\000\004\002\ufffe\001\002" +
    "\000\004\013\143\001\002\000\022\005\034\010\021\013" +
    "\uffd3\046\007\047\012\050\013\051\017\053\026\001\002" +
    "\000\022\005\034\010\021\013\uffd3\046\007\047\012\050" +
    "\013\051\017\053\026\001\002\000\004\013\uffd2\001\002" +
    "\000\004\013\uffd1\001\002\000\030\002\uffd4\005\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\041\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\053\uffd4\001\002\000\004\002\000\001\002\000" +
    "\010\005\ufff3\011\171\023\ufff3\001\002\000\006\005\147" +
    "\023\046\001\002\000\016\005\150\046\007\047\012\050" +
    "\013\051\017\053\026\001\002\000\020\005\043\011\162" +
    "\046\007\047\012\050\013\051\017\053\026\001\002\000" +
    "\004\005\152\001\002\000\020\005\043\011\153\046\007" +
    "\047\012\050\013\051\017\053\026\001\002\000\004\043" +
    "\160\001\002\000\006\004\042\011\155\001\002\000\004" +
    "\043\156\001\002\000\004\012\031\001\002\000\026\002" +
    "\uffc8\005\uffc8\010\uffc8\012\uffc8\013\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\053\uffc8\001\002\000\004\012\031\001" +
    "\002\000\026\002\uffc7\005\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\001\002\000" +
    "\004\043\167\001\002\000\006\004\042\011\164\001\002" +
    "\000\004\043\165\001\002\000\004\012\031\001\002\000" +
    "\026\002\uffc6\005\uffc6\010\uffc6\012\uffc6\013\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\053\uffc6\001\002\000\004\012" +
    "\031\001\002\000\026\002\uffc5\005\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\001" +
    "\002\000\006\040\173\042\172\001\002\000\004\012\031" +
    "\001\002\000\004\012\031\001\002\000\030\002\uffcb\005" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\041\175\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\053\uffcb\001\002\000\004\012\031\001" +
    "\002\000\026\002\uffca\005\uffca\010\uffca\012\uffca\013\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca\001\002\000" +
    "\026\002\uffc9\005\uffc9\010\uffc9\012\uffc9\013\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\053\uffc9\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\056\002\027\004\015\005\037\006\023\010" +
    "\007\011\014\012\024\013\032\014\035\015\004\016\005" +
    "\017\026\020\003\021\021\022\013\024\010\025\034\026" +
    "\022\027\031\030\036\031\017\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\200\004\015\005\037\006" +
    "\023\010\007\011\014\012\024\013\032\014\035\015\004" +
    "\016\005\017\026\020\003\021\021\022\013\024\010\025" +
    "\034\026\022\027\031\030\036\031\017\032\040\001\001" +
    "\000\002\001\001\000\056\002\177\004\015\005\037\006" +
    "\023\010\007\011\014\012\024\013\032\014\035\015\004" +
    "\016\005\017\026\020\003\021\021\022\013\024\010\025" +
    "\034\026\022\027\031\030\036\031\017\032\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\145\010" +
    "\007\011\144\012\024\013\032\014\035\015\004\016\005" +
    "\017\026\020\003\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\137\005\037\006\023\010\007\011\014\012\024" +
    "\013\032\014\035\015\004\016\005\017\026\020\003\021" +
    "\021\022\136\023\135\024\010\025\034\026\022\030\036" +
    "\031\017\032\040\001\001\000\056\002\134\004\015\005" +
    "\037\006\023\010\007\011\014\012\024\013\032\014\035" +
    "\015\004\016\005\017\026\020\003\021\021\022\013\024" +
    "\010\025\034\026\022\027\031\030\036\031\017\032\040" +
    "\001\001\000\002\001\001\000\032\005\110\006\023\010" +
    "\007\011\102\012\024\013\032\014\035\015\004\016\005" +
    "\017\026\020\003\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\043\010\007\011\014\012\024\013" +
    "\032\014\035\015\004\016\005\017\026\020\003\021\021" +
    "\001\001\000\026\010\007\011\047\012\024\013\032\014" +
    "\035\015\004\016\005\017\026\020\003\021\021\001\001" +
    "\000\004\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\007" +
    "\012\024\015\051\016\005\017\026\020\003\021\021\001" +
    "\001\000\002\001\001\000\016\010\007\012\024\016\053" +
    "\017\026\020\003\021\021\001\001\000\002\001\001\000" +
    "\014\010\007\012\024\017\101\020\003\021\021\001\001" +
    "\000\014\010\007\012\024\017\056\020\003\021\021\001" +
    "\001\000\002\001\001\000\012\010\007\012\024\020\100" +
    "\021\021\001\001\000\012\010\007\012\024\020\077\021" +
    "\021\001\001\000\012\010\007\012\024\020\076\021\021" +
    "\001\001\000\012\010\007\012\024\020\063\021\021\001" +
    "\001\000\002\001\001\000\010\010\007\012\024\021\075" +
    "\001\001\000\010\010\007\012\024\021\066\001\001\000" +
    "\002\001\001\000\006\010\007\012\074\001\001\000\006" +
    "\010\007\012\073\001\001\000\006\010\007\012\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\007\012\024\014\133\015\004" +
    "\016\005\017\026\020\003\021\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\137" +
    "\005\037\006\023\010\007\011\014\012\024\013\032\014" +
    "\035\015\004\016\005\017\026\020\003\021\021\022\136" +
    "\023\141\024\010\025\034\026\022\030\036\031\017\032" +
    "\040\001\001\000\054\004\137\005\037\006\023\010\007" +
    "\011\014\012\024\013\032\014\035\015\004\016\005\017" +
    "\026\020\003\021\021\022\136\023\140\024\010\025\034" +
    "\026\022\030\036\031\017\032\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\044\001\001\000\026\010" +
    "\007\011\150\012\024\013\032\014\035\015\004\016\005" +
    "\017\026\020\003\021\021\001\001\000\032\005\162\006" +
    "\023\010\007\011\014\012\024\013\032\014\035\015\004" +
    "\016\005\017\026\020\003\021\021\001\001\000\002\001" +
    "\001\000\032\005\153\006\023\010\007\011\014\012\024" +
    "\013\032\014\035\015\004\016\005\017\026\020\003\021" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\156\001\001\000\002\001\001\000" +
    "\004\027\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\165\001" +
    "\001\000\002\001\001\000\004\027\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\176\001\001\000" +
    "\004\027\173\001\001\000\002\001\001\000\004\027\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(java_cup.runtime.Symbol currToken) {
        System.out.println("Funcionou!: " 
        + "Linha: " + (currToken.left) + " Coluna: " + (currToken.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // unidade_de_compilacao ::= declaracao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= unidade_de_compilacao EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unidade_de_compilacao ::= instrucao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unidade_de_compilacao ::= instrucao_composta unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidade_de_compilacao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // especificador_tipo ::= INTEIRO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // especificador_tipo ::= DECIMAL_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // especificador_tipo ::= CARACTER_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificador_tipo ::= BOOLEANO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao ::= FECHA_COMANDO IDENTIFICADOR especificador_tipo 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracao ::= FECHA_COMANDO ABRE_COLCHETE INTEIRO FECHA_COLCHETE IDENTIFICADOR especificador_tipo 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= expressao VIRGULA expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressao_atribuicao ::= FECHA_COMANDO expressao_condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressao_atribuicao ::= expressao_condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressao_atribuicao ::= expressao_atribuicao operador_atribuicao IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println("Atribuicao feita a um identificador\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operador_atribuicao ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constante ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constante ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constante ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao_condicional ::= expressao_ou 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao_ou ::= expressao_e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao_ou ::= expressao_ou OU expressao_e 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao_e ::= expressao_ou_exclusivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_e ::= expressao_e E expressao_ou_exclusivo 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica E encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao_ou_exclusivo ::= expressao_equalidade 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao_ou_exclusivo ::= expressao_ou_exclusivo OU_EXCLUSIVO expressao_equalidade 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU_EXCLUSIVO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_equalidade ::= expressao_relacional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_equalidade ::= expressao_equalidade EQUIVALENCIA expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '==' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_equalidade ::= expressao_equalidade DIFERENTE expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '!=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_relacional ::= expressao_aditiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_relacional ::= expressao_relacional MENOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao_relacional ::= expressao_relacional MAIOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao_relacional ::= expressao_relacional MENOR_IGUAL expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressao_relacional ::= expressao_relacional MAIOR_IGUAL expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressao_aditiva ::= expressao_multiplicativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao_aditiva ::= expressao_aditiva MAIS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de ADICAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_aditiva ::= expressao_aditiva MENOS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de SUBTRACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_multiplicativa ::= expressao_primaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao_multiplicativa ::= expressao_multiplicativa MULTIPLICACAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de MULTIPLICACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_multiplicativa ::= expressao_multiplicativa DIVISAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de  DIVISAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_multiplicativa ::= expressao_multiplicativa RESTO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de RESTO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao_primaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao_primaria ::= constante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instrucao_composta ::= ABRE_BLOCO bloco_instrucao FECHA_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_composta",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloco_instrucao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloco_instrucao ::= declaracao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloco_instrucao ::= instrucao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucao ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucao ::= instrucao_se 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucao ::= instrucao_iterativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucao ::= instrucao_pulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucao ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrucao_se ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES SE instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrucao_se ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES SE instrucao_composta SE_NAO instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE SE_NAO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrucao_iterativa ::= ABRE_PARENTESES expressao_condicional FECHA_PARENTESES ENQUANTO instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando ENQUANTO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO expressao FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO expressao FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instrucao_iterativa ::= ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO FECHA_PARENTESES PARA instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instrucao_pulo ::= FECHA_COMANDO CONTINUAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instrucao_pulo ::= FECHA_COMANDO PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instrucao_pulo ::= FECHA_COMANDO expressao RETORNAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comando ::= comando_escreva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comando ::= comando_guarda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comando_escreva ::= FECHA_COMANDO ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES ESCREVA 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comando_escreva ::= FECHA_COMANDO ABRE_PARENTESES STRING FECHA_PARENTESES ESCREVA 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comando_guarda ::= FECHA_COMANDO ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES GUARDA 
            {
              Object RESULT =null;
		 System.out.println("Comando GUARDA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_guarda",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
